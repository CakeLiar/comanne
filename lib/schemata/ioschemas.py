
from atomic_agents.agents.base_agent import BaseAgent, BaseAgentConfig
from atomic_agents.lib.base.base_io_schema import BaseIOSchema
from atomic_agents.lib.components.agent_memory import AgentMemory
from atomic_agents.lib.components.system_prompt_generator import SystemPromptGenerator, SystemPromptContextProviderBase

from tools.searxng_search import (
    SearxNGSearchTool,
    SearxNGSearchToolConfig,
    SearxNGSearchToolInputSchema,
    SearxNGSearchToolOutputSchema,
)

from tools.diagnosis import (
    DiagnosisTool,
    DiagnosisToolConfig,
    DiagnosisToolInputSchema,
    DiagnosisToolOutputSchema,
)

from pydantic import Field
from typing import Union

########################
# INPUT/OUTPUT SCHEMAS #
########################

class DiagnosisInputSchema(BaseIOSchema):
    """Input schema for the Diagnosis Agent. Contains the code to be processed"""

    changes_made: str = Field(..., description="The raw changes.")
    commit_title: str = Field(..., description="Commit title.")
    relevant_code: str = Field(..., description="Complete files changed.")


class DiagnosisOutputSchema(BaseIOSchema):
    """Combined output schema for the Diagnosis Agent. """

    framework: str= Field(..., description="Code framework") 
    design_pattern: str=Field(..., description="Codebase design pattern") 
    commit_goal: str=Field(..., description="The goal of the commit")

    tool: str = Field(..., description="The tool to use: 'search'")
    tool_parameters: Union[SearxNGSearchToolInputSchema] = Field(
        ..., description="The parameter for the selected tool"
    )

class JudgeInputSchema(BaseIOSchema):
    """Input schema for the Diagnosis Agent. Contains the code to be processed"""

    results: list = Field(..., description="Results of search.")
    commit_title: str = Field(..., description="Commit title.")
    changes_made: str = Field(..., description="The raw changes.")
    relevant_code: str = Field(..., description="Complete files changed.")


class JudgeOutputSchema(BaseIOSchema):
    """Combined output schema for the Diagnosis Agent. """

    recommendations: str= Field(..., description="Suggested improvements and best practices for the code.")

    code_cohesion: int=Field(..., description="Score from 1-100 rating how well the code components work together.")
    data_structures_use: int=Field(..., description="Score from 1-100 rating the appropriate use of data structures. ")
    molularity: int=Field(..., description="Score from 1-100 rating how well the code is broken into modular components. ")
    dependencies: int=Field(..., description="Score from 1-100 rating how well dependencies are managed and organized. ")



class FinalAnswerSchema(BaseIOSchema):
    """Schema for the final answer generated by the Orchestrator Agent."""

    final_answer: str = Field(..., description="The final answer generated based on the tool output and user query.")
