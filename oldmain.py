from typing import Union
import openai
from pydantic import Field
import json


from atomic_agents.agents.base_agent import BaseAgent, BaseAgentConfig
from atomic_agents.lib.base.base_io_schema import BaseIOSchema
from atomic_agents.lib.components.agent_memory import AgentMemory
from atomic_agents.lib.components.system_prompt_generator import SystemPromptGenerator, SystemPromptContextProviderBase

from tools.searxng_search import (
    SearxNGSearchTool,
    SearxNGSearchToolConfig,
    SearxNGSearchToolInputSchema,
    SearxNGSearchToolOutputSchema,
)

from tools.diagnosis import (
    DiagnosisTool,
    DiagnosisToolConfig,
    DiagnosisToolInputSchema,
    DiagnosisToolOutputSchema,
)

import instructor
from datetime import datetime

from dotenv import load_dotenv
load_dotenv()

########################
# INPUT/OUTPUT SCHEMAS #
########################
class OrchestratorInputSchema(BaseIOSchema):
    """Input schema for the Orchestrator Agent. Contains the user's message to be processed."""

    chat_message: str = Field(..., description="The user's input message to be analyzed and responded to.")


class OrchestratorOutputSchema(BaseIOSchema):
    """Combined output schema for the Orchestrator Agent. Contains the tool to use and its parameters."""

    tool: str = Field(..., description="The tool to use: 'search' or 'diagnosis'") # TODO: Fix this.
    tool_parameters: Union[SearxNGSearchToolInputSchema, DiagnosisToolInputSchema] = Field(
        ..., description="The parameters for the selected tool"
    )

class DiagnosisInputSchema(BaseIOSchema):
    """Input schema for the Diagnosis Agent. Contains the code to be processed"""

    changes_made: str = Field(..., description="The raw changes.")
    commit_title: str = Field(..., description="Commit title.")
    relevant_code: str = Field(..., description="Complete files changed.")


class DiagnosisOutputSchema(BaseIOSchema):
    """Combined output schema for the Diagnosis Agent. """

    framework: str= Field(..., description="Code framework") #TODO: description
    design_pattern: str=Field(..., description="Codebase design pattern") #TODO: description
    commit_goal: str=Field(..., description="The goal of the commit")

    #tool_parameters: Union[SearxNGSearchToolInputSchema, DiagnosisToolInputSchema] = Field(
    #    ..., description="The parameters for the selected tool"
    #)

class FinalAnswerSchema(BaseIOSchema):
    """Schema for the final answer generated by the Orchestrator Agent."""

    final_answer: str = Field(..., description="The final answer generated based on the tool output and user query.")

#######################
# AGENT CONFIGURATION #
#######################
class OrchestratorAgentConfig(BaseAgentConfig):
    """Configuration for the Orchestrator Agent."""

    searxng_config: SearxNGSearchToolConfig
    calculator_config: DiagnosisToolConfig

#####################
# CONTEXT PROVIDERS #
#####################
class CurrentDateProvider(SystemPromptContextProviderBase):
    def __init__(self, title):
        super().__init__(title)
        self.date = datetime.now().strftime("%Y-%m-%d")

    def get_info(self) -> str:
        return f"Current date in format YYYY-MM-DD: {self.date}"





######################
#   DIAGNOSIS AGENT  #
######################

diagnosis_agent = BaseAgent(
    BaseAgentConfig(
        client=instructor.from_openai(openai.OpenAI()),
        model="gpt-4o-mini",
        system_prompt_generator=SystemPromptGenerator( 
            background=[
                "You are a diagnosis Agent that takes a codes extracted from commits decides which of these is being used: design pattern, stack, framework and objective of commit.",
            ],
            output_instructions=[
                
                "Format the output using the appropriate schema.",
            ],
        ),
        input_schema=DiagnosisInputSchema,
        output_schema=DiagnosisOutputSchema,
    )
)


######################
#   SEARCHER AGENT   #
######################

searcher_agent = BaseAgent(
    BaseAgentConfig(
        client=instructor.from_openai(openai.OpenAI()),
        model="gpt-4o-mini",
        system_prompt_generator=SystemPromptGenerator( 
            background=[
                "You need to use the search tool to ",
            ],
            output_instructions=[
                "According to the objective of the code, ",
                "When uncertain, prefer using the search tool.",
                "Format the output using the appropriate schema.",
            ],
        ),
        input_schema=OrchestratorInputSchema,
        output_schema=OrchestratorOutputSchema,
    )
)

######################
#  EVALUATION AGENT  #
######################

orchestrator_agent = BaseAgent(
    BaseAgentConfig(
        client=instructor.from_openai(openai.OpenAI()),
        model="gpt-4o-mini",
        system_prompt_generator=SystemPromptGenerator( 
            background=[
                "You are an Orchestrator Agent that decides what to do when given a commit to give an analysis on it.",
                "Use the search tool for looking up best practices for the framework and design pattern in the code.",
                "Use the diagnosis tool for pieces of code to understand the framework, language and design pattern.",
            ],
            output_instructions=[
                "Analyze the input to determine whether it requires a web search or a calculation.",
                "For search queries, use the 'search' tool and provide 3-5 relevant search queries.",
                "For calculations, use the 'diagnosis' tool and provide the mathematical expression to evaluate.",
                "When uncertain, prefer using the search tool.",
                "Format the output using the appropriate schema.",
            ],
        ),
        input_schema=OrchestratorInputSchema,
        output_schema=OrchestratorOutputSchema,
    )
)

# Register the current date provider
orchestrator_agent.register_context_provider("current_date", CurrentDateProvider("Current Date"))


def execute_tool(
    searxng_tool: SearxNGSearchTool, calculator_tool: DiagnosisTool, orchestrator_output: OrchestratorOutputSchema
) -> Union[SearxNGSearchToolOutputSchema, DiagnosisToolOutputSchema]:
    if orchestrator_output.tool == "search":
        return searxng_tool.run(orchestrator_output.tool_parameters)
    elif orchestrator_output.tool == "":
        return calculator_tool.run(orchestrator_output.tool_parameters)
    else:
        raise ValueError(f"Unknown tool: {orchestrator_output.tool}")

#################
# EXAMPLE USAGE #
#################
if __name__ == "__main__":
    import os
    from rich.console import Console
    from rich.panel import Panel
    from rich.syntax import Syntax

    
    # Initialize Rich console
    console = Console()

    console.print("minecrafting")

    load_dotenv()

    client = instructor.from_openai(openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY")))

    # Initialize the tools
    searxng_tool = SearxNGSearchTool(SearxNGSearchToolConfig(base_url="http://localhost:8080", max_results=5))
    calculator_tool = DiagnosisTool(DiagnosisToolConfig())


    # Print the full system prompt
    console.print(Panel(orchestrator_agent.system_prompt_generator.generate_prompt(), title="System Prompt", expand=False))
    console.print("\n")

    #TODO: Switch to stack of outputs.

    commit_infos = []

    with open("commit_sample.json") as f: 
        s = f.read()
        j = json.loads(s)
        console.print(j["files"]) #TODO: switch to tools, i'm going to do it manually now.
        
        for _file in j["files"]:

            _url = _file["raw_url"]
            _patch = _file["patch"]

            commit_infos.append([_url, _patch])

    # Example inputs
    inputs = [
        "Who won the Nobel Prize in Physics in 2024?",
    ]

    for user_input in inputs:
        console.print(Panel(f"[bold cyan]User Input:[/bold cyan] {user_input}", expand=False))

        # Create the input schema
        input_schema = OrchestratorInputSchema(chat_message=user_input)

        # Print the input schema
        console.print("\n[bold yellow]Generated Input Schema:[/bold yellow]")
        input_syntax = Syntax(str(input_schema.model_dump_json(indent=2)), "json", theme="monokai", line_numbers=True)
        console.print(input_syntax)

        # Run the orchestrator to get the tool selection and input
        orchestrator_output = orchestrator_agent.run(input_schema)

        # Print the orchestrator output
        console.print("\n[bold magenta]Orchestrator Output:[/bold magenta]")
        orchestrator_syntax = Syntax(
            str(orchestrator_output.model_dump_json(indent=2)), "json", theme="monokai", line_numbers=True
        )
        console.print(orchestrator_syntax)
        
        # Run the selected tool
        response = execute_tool(searxng_tool, calculator_tool, orchestrator_output)

        # Print the tool output
        console.print("\n[bold green]Tool Output:[/bold green]")
        output_syntax = Syntax(str(response.model_dump_json(indent=2)), "json", theme="monokai", line_numbers=True)
        console.print(output_syntax)

        console.print("\n" + "-" * 80 + "\n")

        orchestrator_agent.output_schema = FinalAnswerSchema
        orchestrator_agent.memory.add_message("system", response)
        final_answer = orchestrator_agent.run(input_schema)
        console.print(f"\n[bold blue]Final Answer:[/bold blue] {final_answer.final_answer}")
        orchestrator_agent.output_schema = OrchestratorOutputSchema

        # Reset the memory after each response
        orchestrator_agent.memory = AgentMemory()
